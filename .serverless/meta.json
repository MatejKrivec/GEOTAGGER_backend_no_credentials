{
  "C:\\Users\\Matej\\Desktop\\GEOTAGGER_B\\geotagger_backend": {
    "versionSfCore": null,
    "versionFramework": "4.1.5",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {},
    "composeServiceName": null,
    "servicePath": "C:\\Users\\Matej\\Desktop\\GEOTAGGER_B\\geotagger_backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "geotagger-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs14.x",
        "region": "eu-north-1",
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/geotagger-backend-dev-app"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "geotagger-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/geotagger-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/geotagger-backend-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "geotagger-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        }
      },
      "functions": {
        "app": {
          "handler": "dist/main",
          "events": [
            {
              "http": "ANY /"
            },
            {
              "http": "ANY {proxy+}"
            }
          ],
          "name": "geotagger-backend-dev-app",
          "package": {}
        }
      }
    },
    "serviceRawFile": "service: geotagger-backend\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs14.x\r\n  region: eu-north-1\r\nfunctions:\r\n  app:\r\n    handler: dist/main\r\n    events:\r\n      - http: ANY /\r\n      - http: 'ANY {proxy+}' ",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": {
      "message": "Cannot read file node_modules\\has-proto\\test\\index.js due to: EMFILE: too many open files, open 'C:\\Users\\Matej\\Desktop\\GEOTAGGER_B\\geotagger_backend\\node_modules\\has-proto\\test\\index.js'",
      "stack": "ServerlessError2: Cannot read file node_modules\\has-proto\\test\\index.js due to: EMFILE: too many open files, open 'C:\\Users\\Matej\\Desktop\\GEOTAGGER_B\\geotagger_backend\\node_modules\\has-proto\\test\\index.js'\n    at file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:813:26739\n    at tryCatcher (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:394:82107)\n    at Promise2._settlePromiseFromHandler (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:572:10147)\n    at Promise2._settlePromise (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:572:11471)\n    at Promise2._settlePromise0 (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:572:12528)\n    at Promise2._settlePromises (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:572:14124)\n    at _drainQueueStep (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:401:583)\n    at _drainQueue (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:401:479)\n    at Async._drainQueues (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:401:716)\n    at Async.drainQueues (file:///C:/Users/Matej/.serverless/releases/4.1.5/package/dist/sf-core.js:397:3295)\n    at process.processImmediate (node:internal/timers:478:21)",
      "code": "CANNOT_READ_FILE"
    },
    "params": {},
    "machineId": "f5c56d35eb397b60157758e1ab72b448",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "a75fbea4-7fe5-4c02-8013-3cf5456547aa",
    "orgName": "skillupmentor",
    "userId": "zpq4NFDZ2Hdt5x5N7G",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "skillupmentor",
    "subscription": null,
    "userEmail": "matej.krivec6@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "654654363023",
    "versionSf": "4.1.5",
    "serviceProviderAwsCfStackName": "geotagger-backend-dev",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}